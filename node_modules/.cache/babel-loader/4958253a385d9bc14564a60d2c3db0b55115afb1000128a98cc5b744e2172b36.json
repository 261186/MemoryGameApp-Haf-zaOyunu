{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\drnma\\\\OneDrive\\\\Masa\\xFCst\\xFC\\\\memory-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport { useEffect } from \"react\";\nimport MemoryCard from \"./components/MemoryCard\";\n\n//kartların tanımlanması ve matched: false => seçilen kartın durumu\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardList = [{\n  path: \"/img/1.jpeg\",\n  matched: false\n}, {\n  path: \"/img/2.jpeg\",\n  matched: false\n}, {\n  path: \"/img/3.jpeg\",\n  matched: false\n}, {\n  path: \"/img/4.jpeg\",\n  matched: false\n}, {\n  path: \"/img/5.jpeg\",\n  matched: false\n}, {\n  path: \"/img/6.jpeg\",\n  matched: false\n}];\nfunction App() {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [selectedOne, setSelectedOne] = useState(null); //1.seçim\n  const [selectedTwo, setSelectedTwo] = useState(null); //2.seçim\n  const [disabled, setDisabled] = useState(false); //2 seçim yapıldıktan sonra durumu\n\n  const prepareCard = () => {\n    const sortedCards = [...cardList, ...cardList] //her karttan 2 adet\n    .sort(() => 0.5 - Math.random()) //random'un otomatik olarak 0-1 arası değer üretmesi\n    .map(card => ({\n      ...card,\n      id: Math.random()\n    })); //sayfayı yenileyince kartların random sıralanması\n\n    setCards(sortedCards);\n    setSelectedOne(null);\n    setSelectedTwo(null);\n  };\n  //resim seçildiğide\n  const handleSelected = card => {\n    selectedOne ? setSelectedTwo(card) : setSelectedOne(card);\n  };\n\n  //uygulama yenilenince\n  useEffect(() => {\n    prepareCard();\n  }, []);\n\n  //2 seçim yapıldıktan sonra 3.seçimi yapmasın\n  useEffect(() => {\n    if (selectedOne && selectedTwo) {\n      setDisabled(true);\n      //2 seçimde yapılmış ise ve seçimler aynı ise kart durumlarını güncelle=>matched\n      if (selectedOne.path === selectedTwo.path) {\n        setCards(previosCards => {\n          return prepareCard.map(card => {\n            if (card.path === selectedOne.path) {\n              return {\n                ...card,\n                matched: true\n              };\n            }\n          });\n        });\n      }\n    }\n  }, [selectedOne, selectedTwo]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Memory Game App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: prepareCard,\n      children: \"Oyunu Ba\\u015Flat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(MemoryCard, {\n        card: card,\n        handleSelected: handleSelected //resim seçildiğide\n        ,\n        disabled: disabled //resim seçildiğide 3.kart seçilmesin\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"fRPtyARE6MFqovn0/o26b0bMn/g=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","MemoryCard","jsxDEV","_jsxDEV","cardList","path","matched","App","_s","cards","setCards","selectedOne","setSelectedOne","selectedTwo","setSelectedTwo","disabled","setDisabled","prepareCard","sortedCards","sort","Math","random","map","card","id","handleSelected","previosCards","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/drnma/OneDrive/Masaüstü/memory-app/src/App.js"],"sourcesContent":["import { useState } from \"react\";\nimport \"./App.css\";\nimport { useEffect } from \"react\";\nimport MemoryCard from \"./components/MemoryCard\";\n\n//kartların tanımlanması ve matched: false => seçilen kartın durumu\nconst cardList = [\n  { path: \"/img/1.jpeg\", matched: false },\n  { path: \"/img/2.jpeg\", matched: false },\n  { path: \"/img/3.jpeg\", matched: false },\n  { path: \"/img/4.jpeg\", matched: false },\n  { path: \"/img/5.jpeg\", matched: false },\n  { path: \"/img/6.jpeg\", matched: false },\n];\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [selectedOne, setSelectedOne] = useState(null); //1.seçim\n  const [selectedTwo, setSelectedTwo] = useState(null); //2.seçim\n  const [disabled, setDisabled] = useState(false); //2 seçim yapıldıktan sonra durumu\n\n  const prepareCard = () => {\n    const sortedCards = [...cardList, ...cardList] //her karttan 2 adet\n      .sort(() => 0.5 - Math.random()) //random'un otomatik olarak 0-1 arası değer üretmesi\n      .map((card) => ({ ...card, id: Math.random() })); //sayfayı yenileyince kartların random sıralanması\n\n    setCards(sortedCards);\n    setSelectedOne(null);\n    setSelectedTwo(null);\n  };\n  //resim seçildiğide\n  const handleSelected = (card) => {\n    selectedOne ? setSelectedTwo(card) : setSelectedOne(card);\n  };\n\n  //uygulama yenilenince\n  useEffect(() => {\n    prepareCard();\n  }, []);\n\n  //2 seçim yapıldıktan sonra 3.seçimi yapmasın\n  useEffect(() => {\n    if (selectedOne && selectedTwo) {\n      setDisabled(true);\n      //2 seçimde yapılmış ise ve seçimler aynı ise kart durumlarını güncelle=>matched\n      if (selectedOne.path === selectedTwo.path) {\n        setCards((previosCards) => {\n          return prepareCard.map(card => {\n            if (card.path === selectedOne.path) {\n              return { ...card, matched: true };\n            }\n          });\n        });\n      }\n    }\n  }, [selectedOne, selectedTwo]);\n\n  return (\n    <div className=\"container\">\n      <h1>Memory Game App</h1>\n      {/* butona tıklayınca kartların random sıralanması */}\n      <button className=\"btn\" onClick={prepareCard}>\n        Oyunu Başlat\n      </button>\n      <div className=\"card-grid\">\n        {cards.map((card) => (\n          <MemoryCard\n            card={card}\n            key={card.id}\n            handleSelected={handleSelected} //resim seçildiğide\n            disabled={disabled} //resim seçildiğide 3.kart seçilmesin\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}