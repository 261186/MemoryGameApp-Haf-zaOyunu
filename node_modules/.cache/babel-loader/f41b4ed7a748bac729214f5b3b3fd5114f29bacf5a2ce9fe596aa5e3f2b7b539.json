{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\drnma\\\\OneDrive\\\\Masa\\xFCst\\xFC\\\\memory-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport { useEffect } from \"react\";\nimport MemoryCard from \"./components/MemoryCard\";\n\n//kartların tanımlanması\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardList = [{\n  path: \"/img/1.jpeg\"\n}, {\n  path: \"/img/2.jpeg\"\n}, {\n  path: \"/img/3.jpeg\"\n}, {\n  path: \"/img/4.jpeg\"\n}, {\n  path: \"/img/5.jpeg\"\n}, {\n  path: \"/img/6.jpeg\"\n}];\nfunction App() {\n  _s();\n  const [cards, setCards] = useState([]);\n  const prepareCard = () => {\n    const sortedCards = [...cardList, ...cardList] //her karttan 2 adet\n    .sort(() => 0.5 - Math.random()) //random'un otomatik olarak 0-1 arası değer üretmesi\n    .map(card => ({\n      ...card,\n      id: Math.random()\n    })); //sayfayı yenileyince kartların random sıralanması\n\n    setCards(sortedCards);\n  };\n  useEffect(() => {\n    prepareCard();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Memory Game App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: prepareCard,\n      children: \"Oyunu Ba\\u015Flat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(MemoryCard, {\n        card: card\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"M51NroWgc5aUEHiqsZiaQ+7WeWA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","MemoryCard","jsxDEV","_jsxDEV","cardList","path","App","_s","cards","setCards","prepareCard","sortedCards","sort","Math","random","map","card","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/drnma/OneDrive/Masaüstü/memory-app/src/App.js"],"sourcesContent":["import { useState } from \"react\";\nimport \"./App.css\";\nimport { useEffect } from \"react\";\nimport MemoryCard from \"./components/MemoryCard\";\n\n//kartların tanımlanması\nconst cardList = [\n  { path: \"/img/1.jpeg\" },\n  { path: \"/img/2.jpeg\" },\n  { path: \"/img/3.jpeg\" },\n  { path: \"/img/4.jpeg\" },\n  { path: \"/img/5.jpeg\" },\n  { path: \"/img/6.jpeg\" },\n];\nfunction App() {\n  const [cards, setCards] = useState([]);\n\n  const prepareCard = () => {\n    const sortedCards = [...cardList, ...cardList] //her karttan 2 adet\n      .sort(() => 0.5 - Math.random()) //random'un otomatik olarak 0-1 arası değer üretmesi\n      .map((card) => ({ ...card, id: Math.random() })); //sayfayı yenileyince kartların random sıralanması\n\n    setCards(sortedCards);\n  };\n\n  useEffect(() => {\n    prepareCard();\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <h1>Memory Game App</h1>\n      {/* butona tıklayınca kartların random sıralanması */}\n      <button className=\"btn\" onClick={prepareCard}>\n        Oyunu Başlat\n      </button>\n      <div className=\"card-grid\">\n        {cards.map((card) => (\n          <MemoryCard card = {card} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAO,WAAW;AAClB,SAASC,SAAS,QAAQ,OAAO;AACjC,OAAOC,UAAU,MAAM,yBAAyB;;AAEhD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,QAAQ,GAAG,CACf;EAAEC,IAAI,EAAE;AAAc,CAAC,EACvB;EAAEA,IAAI,EAAE;AAAc,CAAC,EACvB;EAAEA,IAAI,EAAE;AAAc,CAAC,EACvB;EAAEA,IAAI,EAAE;AAAc,CAAC,EACvB;EAAEA,IAAI,EAAE;AAAc,CAAC,EACvB;EAAEA,IAAI,EAAE;AAAc,CAAC,CACxB;AACD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMW,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAMC,WAAW,GAAG,CAAC,GAAGP,QAAQ,EAAE,GAAGA,QAAQ,CAAC,CAAC;IAAA,CAC5CQ,IAAI,CAAC,MAAM,GAAG,GAAGC,IAAI,CAACC,MAAM,EAAE,CAAC,CAAC;IAAA,CAChCC,GAAG,CAAEC,IAAI,KAAM;MAAE,GAAGA,IAAI;MAAEC,EAAE,EAAEJ,IAAI,CAACC,MAAM;IAAG,CAAC,CAAC,CAAC,CAAC,CAAC;;IAEpDL,QAAQ,CAACE,WAAW,CAAC;EACvB,CAAC;EAEDX,SAAS,CAAC,MAAM;IACdU,WAAW,EAAE;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEP,OAAA;IAAKe,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBhB,OAAA;MAAAgB,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eAExBpB,OAAA;MAAQe,SAAS,EAAC,KAAK;MAACM,OAAO,EAAEd,WAAY;MAAAS,QAAA,EAAC;IAE9C;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS,eACTpB,OAAA;MAAKe,SAAS,EAAC,WAAW;MAAAC,QAAA,EACvBX,KAAK,CAACO,GAAG,CAAEC,IAAI,iBACdb,OAAA,CAACF,UAAU;QAACe,IAAI,EAAIA;MAAK;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC1B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACE;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACF;AAEV;AAAChB,EAAA,CA7BQD,GAAG;AAAAmB,EAAA,GAAHnB,GAAG;AA+BZ,eAAeA,GAAG;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}